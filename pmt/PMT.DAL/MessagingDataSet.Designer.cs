//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PMT.DAL {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("MessagingDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MessagingDataSet : System.Data.DataSet {
        
        private MessagesDataTable tableMessages;
        
        private MessageRecipientsDataTable tableMessageRecipients;
        
        private ReceivedMessagesDataTable tableReceivedMessages;
        
        private System.Data.DataRelation relationFK_MessageRecipients_Messages;
        
        private System.Data.DataRelation relationFK_MessageRecipients_Messages1;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MessagingDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MessagingDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Messages"] != null)) {
                    base.Tables.Add(new MessagesDataTable(ds.Tables["Messages"]));
                }
                if ((ds.Tables["MessageRecipients"] != null)) {
                    base.Tables.Add(new MessageRecipientsDataTable(ds.Tables["MessageRecipients"]));
                }
                if ((ds.Tables["ReceivedMessages"] != null)) {
                    base.Tables.Add(new ReceivedMessagesDataTable(ds.Tables["ReceivedMessages"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MessagesDataTable Messages {
            get {
                return this.tableMessages;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MessageRecipientsDataTable MessageRecipients {
            get {
                return this.tableMessageRecipients;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceivedMessagesDataTable ReceivedMessages {
            get {
                return this.tableReceivedMessages;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            MessagingDataSet cln = ((MessagingDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Messages"] != null)) {
                    base.Tables.Add(new MessagesDataTable(ds.Tables["Messages"]));
                }
                if ((ds.Tables["MessageRecipients"] != null)) {
                    base.Tables.Add(new MessageRecipientsDataTable(ds.Tables["MessageRecipients"]));
                }
                if ((ds.Tables["ReceivedMessages"] != null)) {
                    base.Tables.Add(new ReceivedMessagesDataTable(ds.Tables["ReceivedMessages"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMessages = ((MessagesDataTable)(base.Tables["Messages"]));
            if ((initTable == true)) {
                if ((this.tableMessages != null)) {
                    this.tableMessages.InitVars();
                }
            }
            this.tableMessageRecipients = ((MessageRecipientsDataTable)(base.Tables["MessageRecipients"]));
            if ((initTable == true)) {
                if ((this.tableMessageRecipients != null)) {
                    this.tableMessageRecipients.InitVars();
                }
            }
            this.tableReceivedMessages = ((ReceivedMessagesDataTable)(base.Tables["ReceivedMessages"]));
            if ((initTable == true)) {
                if ((this.tableReceivedMessages != null)) {
                    this.tableReceivedMessages.InitVars();
                }
            }
            this.relationFK_MessageRecipients_Messages = this.Relations["FK_MessageRecipients_Messages"];
            this.relationFK_MessageRecipients_Messages1 = this.Relations["FK_MessageRecipients_Messages1"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MessagingDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MessagingDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMessages = new MessagesDataTable();
            base.Tables.Add(this.tableMessages);
            this.tableMessageRecipients = new MessageRecipientsDataTable();
            base.Tables.Add(this.tableMessageRecipients);
            this.tableReceivedMessages = new ReceivedMessagesDataTable();
            base.Tables.Add(this.tableReceivedMessages);
            this.relationFK_MessageRecipients_Messages = new System.Data.DataRelation("FK_MessageRecipients_Messages", new System.Data.DataColumn[] {
                        this.tableMessages.IDColumn}, new System.Data.DataColumn[] {
                        this.tableMessageRecipients.MessageIDColumn}, false);
            this.Relations.Add(this.relationFK_MessageRecipients_Messages);
            this.relationFK_MessageRecipients_Messages1 = new System.Data.DataRelation("FK_MessageRecipients_Messages1", new System.Data.DataColumn[] {
                        this.tableMessages.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceivedMessages.MessageIDColumn}, false);
            this.Relations.Add(this.relationFK_MessageRecipients_Messages1);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMessages() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMessageRecipients() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceivedMessages() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            MessagingDataSet ds = new MessagingDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void MessagesRowChangeEventHandler(object sender, MessagesRowChangeEvent e);
        
        public delegate void MessageRecipientsRowChangeEventHandler(object sender, MessageRecipientsRowChangeEvent e);
        
        public delegate void ReceivedMessagesRowChangeEventHandler(object sender, ReceivedMessagesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MessagesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnSenderID;
            
            private System.Data.DataColumn columnSubject;
            
            private System.Data.DataColumn columnBody;
            
            private System.Data.DataColumn columnDateSent;
            
            private System.Data.DataColumn columnSenderUserame;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagesDataTable() {
                this.TableName = "Messages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MessagesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MessagesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderIDColumn {
                get {
                    return this.columnSenderID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BodyColumn {
                get {
                    return this.columnBody;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateSentColumn {
                get {
                    return this.columnDateSent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderUserameColumn {
                get {
                    return this.columnSenderUserame;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagesRow this[int index] {
                get {
                    return ((MessagesRow)(this.Rows[index]));
                }
            }
            
            public event MessagesRowChangeEventHandler MessagesRowChanging;
            
            public event MessagesRowChangeEventHandler MessagesRowChanged;
            
            public event MessagesRowChangeEventHandler MessagesRowDeleting;
            
            public event MessagesRowChangeEventHandler MessagesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMessagesRow(MessagesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagesRow AddMessagesRow(int SenderID, string Subject, string Body, System.DateTime DateSent, string SenderUserame) {
                MessagesRow rowMessagesRow = ((MessagesRow)(this.NewRow()));
                rowMessagesRow.ItemArray = new object[] {
                        null,
                        SenderID,
                        Subject,
                        Body,
                        DateSent,
                        SenderUserame};
                this.Rows.Add(rowMessagesRow);
                return rowMessagesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagesRow FindByID(int ID) {
                return ((MessagesRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MessagesDataTable cln = ((MessagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MessagesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnSenderID = base.Columns["SenderID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnBody = base.Columns["Body"];
                this.columnDateSent = base.Columns["DateSent"];
                this.columnSenderUserame = base.Columns["SenderUserame"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnSenderID = new System.Data.DataColumn("SenderID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderID);
                this.columnSubject = new System.Data.DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnBody = new System.Data.DataColumn("Body", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBody);
                this.columnDateSent = new System.Data.DataColumn("DateSent", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateSent);
                this.columnSenderUserame = new System.Data.DataColumn("SenderUserame", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderUserame);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnSenderID.AllowDBNull = false;
                this.columnSubject.MaxLength = 50;
                this.columnBody.MaxLength = 2147483647;
                this.columnDateSent.AllowDBNull = false;
                this.columnSenderUserame.ReadOnly = true;
                this.columnSenderUserame.MaxLength = 15;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagesRow NewMessagesRow() {
                return ((MessagesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MessagesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MessagesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MessagesRowChanged != null)) {
                    this.MessagesRowChanged(this, new MessagesRowChangeEvent(((MessagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MessagesRowChanging != null)) {
                    this.MessagesRowChanging(this, new MessagesRowChangeEvent(((MessagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MessagesRowDeleted != null)) {
                    this.MessagesRowDeleted(this, new MessagesRowChangeEvent(((MessagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MessagesRowDeleting != null)) {
                    this.MessagesRowDeleting(this, new MessagesRowChangeEvent(((MessagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMessagesRow(MessagesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MessagingDataSet ds = new MessagingDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MessagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MessageRecipientsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMessageID;
            
            private System.Data.DataColumn columnUserID;
            
            private System.Data.DataColumn columnOpened;
            
            private System.Data.DataColumn columnUsername;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRecipientsDataTable() {
                this.TableName = "MessageRecipients";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MessageRecipientsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MessageRecipientsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MessageIDColumn {
                get {
                    return this.columnMessageID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OpenedColumn {
                get {
                    return this.columnOpened;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRecipientsRow this[int index] {
                get {
                    return ((MessageRecipientsRow)(this.Rows[index]));
                }
            }
            
            public event MessageRecipientsRowChangeEventHandler MessageRecipientsRowChanging;
            
            public event MessageRecipientsRowChangeEventHandler MessageRecipientsRowChanged;
            
            public event MessageRecipientsRowChangeEventHandler MessageRecipientsRowDeleting;
            
            public event MessageRecipientsRowChangeEventHandler MessageRecipientsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMessageRecipientsRow(MessageRecipientsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRecipientsRow AddMessageRecipientsRow(MessagesRow parentMessagesRowByFK_MessageRecipients_Messages, int UserID, bool Opened, string Username) {
                MessageRecipientsRow rowMessageRecipientsRow = ((MessageRecipientsRow)(this.NewRow()));
                rowMessageRecipientsRow.ItemArray = new object[] {
                        parentMessagesRowByFK_MessageRecipients_Messages[0],
                        UserID,
                        Opened,
                        Username};
                this.Rows.Add(rowMessageRecipientsRow);
                return rowMessageRecipientsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRecipientsRow FindByMessageIDUserID(int MessageID, int UserID) {
                return ((MessageRecipientsRow)(this.Rows.Find(new object[] {
                            MessageID,
                            UserID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MessageRecipientsDataTable cln = ((MessageRecipientsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MessageRecipientsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMessageID = base.Columns["MessageID"];
                this.columnUserID = base.Columns["UserID"];
                this.columnOpened = base.Columns["Opened"];
                this.columnUsername = base.Columns["Username"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMessageID = new System.Data.DataColumn("MessageID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageID);
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnOpened = new System.Data.DataColumn("Opened", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpened);
                this.columnUsername = new System.Data.DataColumn("Username", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsername);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMessageID,
                                this.columnUserID}, true));
                this.columnMessageID.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
                this.columnOpened.AllowDBNull = false;
                this.columnUsername.ReadOnly = true;
                this.columnUsername.MaxLength = 15;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRecipientsRow NewMessageRecipientsRow() {
                return ((MessageRecipientsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MessageRecipientsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MessageRecipientsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MessageRecipientsRowChanged != null)) {
                    this.MessageRecipientsRowChanged(this, new MessageRecipientsRowChangeEvent(((MessageRecipientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MessageRecipientsRowChanging != null)) {
                    this.MessageRecipientsRowChanging(this, new MessageRecipientsRowChangeEvent(((MessageRecipientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MessageRecipientsRowDeleted != null)) {
                    this.MessageRecipientsRowDeleted(this, new MessageRecipientsRowChangeEvent(((MessageRecipientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MessageRecipientsRowDeleting != null)) {
                    this.MessageRecipientsRowDeleting(this, new MessageRecipientsRowChangeEvent(((MessageRecipientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMessageRecipientsRow(MessageRecipientsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MessagingDataSet ds = new MessagingDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MessageRecipientsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceivedMessagesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMessageID;
            
            private System.Data.DataColumn columnUserID;
            
            private System.Data.DataColumn columnOpened;
            
            private System.Data.DataColumn columnSenderID;
            
            private System.Data.DataColumn columnSubject;
            
            private System.Data.DataColumn columnBody;
            
            private System.Data.DataColumn columnDateSent;
            
            private System.Data.DataColumn columnUsername;
            
            private System.Data.DataColumn columnFirstName;
            
            private System.Data.DataColumn columnLastName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceivedMessagesDataTable() {
                this.TableName = "ReceivedMessages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceivedMessagesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceivedMessagesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MessageIDColumn {
                get {
                    return this.columnMessageID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OpenedColumn {
                get {
                    return this.columnOpened;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderIDColumn {
                get {
                    return this.columnSenderID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BodyColumn {
                get {
                    return this.columnBody;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateSentColumn {
                get {
                    return this.columnDateSent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceivedMessagesRow this[int index] {
                get {
                    return ((ReceivedMessagesRow)(this.Rows[index]));
                }
            }
            
            public event ReceivedMessagesRowChangeEventHandler ReceivedMessagesRowChanging;
            
            public event ReceivedMessagesRowChangeEventHandler ReceivedMessagesRowChanged;
            
            public event ReceivedMessagesRowChangeEventHandler ReceivedMessagesRowDeleting;
            
            public event ReceivedMessagesRowChangeEventHandler ReceivedMessagesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceivedMessagesRow(ReceivedMessagesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceivedMessagesRow AddReceivedMessagesRow(MessagesRow parentMessagesRowByFK_MessageRecipients_Messages1, int UserID, bool Opened, int SenderID, string Subject, string Body, System.DateTime DateSent, string Username, string FirstName, string LastName) {
                ReceivedMessagesRow rowReceivedMessagesRow = ((ReceivedMessagesRow)(this.NewRow()));
                rowReceivedMessagesRow.ItemArray = new object[] {
                        parentMessagesRowByFK_MessageRecipients_Messages1[0],
                        UserID,
                        Opened,
                        SenderID,
                        Subject,
                        Body,
                        DateSent,
                        Username,
                        FirstName,
                        LastName};
                this.Rows.Add(rowReceivedMessagesRow);
                return rowReceivedMessagesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReceivedMessagesDataTable cln = ((ReceivedMessagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReceivedMessagesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMessageID = base.Columns["MessageID"];
                this.columnUserID = base.Columns["UserID"];
                this.columnOpened = base.Columns["Opened"];
                this.columnSenderID = base.Columns["SenderID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnBody = base.Columns["Body"];
                this.columnDateSent = base.Columns["DateSent"];
                this.columnUsername = base.Columns["Username"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMessageID = new System.Data.DataColumn("MessageID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageID);
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnOpened = new System.Data.DataColumn("Opened", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpened);
                this.columnSenderID = new System.Data.DataColumn("SenderID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderID);
                this.columnSubject = new System.Data.DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnBody = new System.Data.DataColumn("Body", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBody);
                this.columnDateSent = new System.Data.DataColumn("DateSent", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateSent);
                this.columnUsername = new System.Data.DataColumn("Username", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsername);
                this.columnFirstName = new System.Data.DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new System.Data.DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnSenderID.AllowDBNull = false;
                this.columnSubject.MaxLength = 50;
                this.columnBody.MaxLength = 2147483647;
                this.columnDateSent.AllowDBNull = false;
                this.columnUsername.MaxLength = 15;
                this.columnFirstName.MaxLength = 25;
                this.columnLastName.MaxLength = 25;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceivedMessagesRow NewReceivedMessagesRow() {
                return ((ReceivedMessagesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReceivedMessagesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReceivedMessagesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceivedMessagesRowChanged != null)) {
                    this.ReceivedMessagesRowChanged(this, new ReceivedMessagesRowChangeEvent(((ReceivedMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceivedMessagesRowChanging != null)) {
                    this.ReceivedMessagesRowChanging(this, new ReceivedMessagesRowChangeEvent(((ReceivedMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceivedMessagesRowDeleted != null)) {
                    this.ReceivedMessagesRowDeleted(this, new ReceivedMessagesRowChangeEvent(((ReceivedMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceivedMessagesRowDeleting != null)) {
                    this.ReceivedMessagesRowDeleting(this, new ReceivedMessagesRowChangeEvent(((ReceivedMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceivedMessagesRow(ReceivedMessagesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MessagingDataSet ds = new MessagingDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceivedMessagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MessagesRow : System.Data.DataRow {
            
            private MessagesDataTable tableMessages;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MessagesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMessages = ((MessagesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableMessages.IDColumn]));
                }
                set {
                    this[this.tableMessages.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SenderID {
                get {
                    return ((int)(this[this.tableMessages.SenderIDColumn]));
                }
                set {
                    this[this.tableMessages.SenderIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableMessages.SubjectColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Subject\' in table \'Messages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMessages.SubjectColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Body {
                get {
                    try {
                        return ((string)(this[this.tableMessages.BodyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Body\' in table \'Messages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMessages.BodyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateSent {
                get {
                    return ((System.DateTime)(this[this.tableMessages.DateSentColumn]));
                }
                set {
                    this[this.tableMessages.DateSentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SenderUserame {
                get {
                    try {
                        return ((string)(this[this.tableMessages.SenderUserameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SenderUserame\' in table \'Messages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMessages.SenderUserameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableMessages.SubjectColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableMessages.SubjectColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBodyNull() {
                return this.IsNull(this.tableMessages.BodyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBodyNull() {
                this[this.tableMessages.BodyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSenderUserameNull() {
                return this.IsNull(this.tableMessages.SenderUserameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSenderUserameNull() {
                this[this.tableMessages.SenderUserameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRecipientsRow[] GetMessageRecipientsRows() {
                return ((MessageRecipientsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_MessageRecipients_Messages"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceivedMessagesRow[] GetReceivedMessagesRows() {
                return ((ReceivedMessagesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_MessageRecipients_Messages1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MessageRecipientsRow : System.Data.DataRow {
            
            private MessageRecipientsDataTable tableMessageRecipients;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MessageRecipientsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMessageRecipients = ((MessageRecipientsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MessageID {
                get {
                    return ((int)(this[this.tableMessageRecipients.MessageIDColumn]));
                }
                set {
                    this[this.tableMessageRecipients.MessageIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableMessageRecipients.UserIDColumn]));
                }
                set {
                    this[this.tableMessageRecipients.UserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Opened {
                get {
                    return ((bool)(this[this.tableMessageRecipients.OpenedColumn]));
                }
                set {
                    this[this.tableMessageRecipients.OpenedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Username {
                get {
                    try {
                        return ((string)(this[this.tableMessageRecipients.UsernameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Username\' in table \'MessageRecipients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMessageRecipients.UsernameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagesRow MessagesRow {
                get {
                    return ((MessagesRow)(this.GetParentRow(this.Table.ParentRelations["FK_MessageRecipients_Messages"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MessageRecipients_Messages"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsernameNull() {
                return this.IsNull(this.tableMessageRecipients.UsernameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsernameNull() {
                this[this.tableMessageRecipients.UsernameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceivedMessagesRow : System.Data.DataRow {
            
            private ReceivedMessagesDataTable tableReceivedMessages;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceivedMessagesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceivedMessages = ((ReceivedMessagesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MessageID {
                get {
                    try {
                        return ((int)(this[this.tableReceivedMessages.MessageIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MessageID\' in table \'ReceivedMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceivedMessages.MessageIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableReceivedMessages.UserIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserID\' in table \'ReceivedMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceivedMessages.UserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Opened {
                get {
                    try {
                        return ((bool)(this[this.tableReceivedMessages.OpenedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Opened\' in table \'ReceivedMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceivedMessages.OpenedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SenderID {
                get {
                    return ((int)(this[this.tableReceivedMessages.SenderIDColumn]));
                }
                set {
                    this[this.tableReceivedMessages.SenderIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableReceivedMessages.SubjectColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Subject\' in table \'ReceivedMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceivedMessages.SubjectColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Body {
                get {
                    try {
                        return ((string)(this[this.tableReceivedMessages.BodyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Body\' in table \'ReceivedMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceivedMessages.BodyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateSent {
                get {
                    return ((System.DateTime)(this[this.tableReceivedMessages.DateSentColumn]));
                }
                set {
                    this[this.tableReceivedMessages.DateSentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Username {
                get {
                    try {
                        return ((string)(this[this.tableReceivedMessages.UsernameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Username\' in table \'ReceivedMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceivedMessages.UsernameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableReceivedMessages.FirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FirstName\' in table \'ReceivedMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceivedMessages.FirstNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableReceivedMessages.LastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LastName\' in table \'ReceivedMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceivedMessages.LastNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagesRow MessagesRow {
                get {
                    return ((MessagesRow)(this.GetParentRow(this.Table.ParentRelations["FK_MessageRecipients_Messages1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MessageRecipients_Messages1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMessageIDNull() {
                return this.IsNull(this.tableReceivedMessages.MessageIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMessageIDNull() {
                this[this.tableReceivedMessages.MessageIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableReceivedMessages.UserIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableReceivedMessages.UserIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpenedNull() {
                return this.IsNull(this.tableReceivedMessages.OpenedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpenedNull() {
                this[this.tableReceivedMessages.OpenedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableReceivedMessages.SubjectColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableReceivedMessages.SubjectColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBodyNull() {
                return this.IsNull(this.tableReceivedMessages.BodyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBodyNull() {
                this[this.tableReceivedMessages.BodyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsernameNull() {
                return this.IsNull(this.tableReceivedMessages.UsernameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsernameNull() {
                this[this.tableReceivedMessages.UsernameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableReceivedMessages.FirstNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableReceivedMessages.FirstNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableReceivedMessages.LastNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableReceivedMessages.LastNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MessagesRowChangeEvent : System.EventArgs {
            
            private MessagesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagesRowChangeEvent(MessagesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MessageRecipientsRowChangeEvent : System.EventArgs {
            
            private MessageRecipientsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRecipientsRowChangeEvent(MessageRecipientsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRecipientsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceivedMessagesRowChangeEvent : System.EventArgs {
            
            private ReceivedMessagesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceivedMessagesRowChangeEvent(ReceivedMessagesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceivedMessagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace PMT.DAL.MessagingDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    internal partial class MessagesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MessagesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Messages";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("SenderID", "SenderID");
            tableMapping.ColumnMappings.Add("Subject", "Subject");
            tableMapping.ColumnMappings.Add("Body", "Body");
            tableMapping.ColumnMappings.Add("DateSent", "DateSent");
            tableMapping.ColumnMappings.Add("SenderUserame", "SenderUserame");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Messages] WHERE (([ID] = @Original_ID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Messages] ([SenderID], [Subject], [Body], [DateSent]) VALUES (@SenderID, @Subject, @Body, @DateSent);
SELECT ID, SenderID, Subject, Body, DateSent, (SELECT Username FROM Users WHERE (Messages.SenderID = ID)) AS SenderUserame FROM Messages WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SenderID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Subject", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Subject", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Body", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Body", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateSent", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateSent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Messages] SET [SenderID] = @SenderID, [Subject] = @Subject, [Body] = @Body, [DateSent] = @DateSent WHERE (([ID] = @Original_ID));
SELECT ID, SenderID, Subject, Body, DateSent, (SELECT Username FROM Users WHERE (Messages.SenderID = ID)) AS SenderUserame FROM Messages WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SenderID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Subject", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Subject", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Body", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Body", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateSent", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateSent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PMT.DAL.Properties.Settings.Default.PmtConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     ID, SenderID, Subject, Body, DateSent,\r\n                          (SEL" +
                "ECT     Username\r\n                            FROM          Users\r\n             " +
                "               WHERE      (Messages.SenderID = ID)) AS SenderUserame\r\nFROM      " +
                "   Messages";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     ID, SenderID, Subject, Body, DateSent,
                          (SELECT     Username
                            FROM          Users
                            WHERE      (Messages.SenderID = ID)) AS SenderUserame
FROM         Messages
WHERE     (SenderID = @SenderID)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SenderID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MessagingDataSet.MessagesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MessagingDataSet.MessagesDataTable GetMessages() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MessagingDataSet.MessagesDataTable dataTable = new MessagingDataSet.MessagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySenderID(MessagingDataSet.MessagesDataTable dataTable, int SenderID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(SenderID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MessagingDataSet.MessagesDataTable GetMessagesBySenderID(int SenderID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(SenderID));
            MessagingDataSet.MessagesDataTable dataTable = new MessagingDataSet.MessagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MessagingDataSet.MessagesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MessagingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Messages");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SenderID, string Subject, string Body, System.DateTime DateSent) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SenderID));
            if ((Subject == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Subject));
            }
            if ((Body == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Body));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateSent));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SenderID, string Subject, string Body, System.DateTime DateSent, int Original_ID, int ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SenderID));
            if ((Subject == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Subject));
            }
            if ((Body == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Body));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateSent));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    internal partial class MessageRecipientsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MessageRecipientsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MessageRecipients";
            tableMapping.ColumnMappings.Add("MessageID", "MessageID");
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("Opened", "Opened");
            tableMapping.ColumnMappings.Add("Username", "Username");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [MessageRecipients] WHERE (([MessageID] = @Original_MessageID) AND ([" +
                "UserID] = @Original_UserID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MessageID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MessageID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [MessageRecipients] ([MessageID], [UserID], [Opened]) VALUES (@MessageID, @UserID, @Opened);
SELECT MessageID, UserID, Opened, (SELECT Username FROM Users WHERE (MessageRecipients.UserID = ID)) AS Username FROM MessageRecipients WHERE (MessageID = @MessageID) AND (UserID = @UserID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MessageID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MessageID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Opened", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Opened", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [MessageRecipients] SET [MessageID] = @MessageID, [UserID] = @UserID, [Opened] = @Opened WHERE (([MessageID] = @Original_MessageID) AND ([UserID] = @Original_UserID));
SELECT MessageID, UserID, Opened, (SELECT Username FROM Users WHERE (MessageRecipients.UserID = ID)) AS Username FROM MessageRecipients WHERE (MessageID = @MessageID) AND (UserID = @UserID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MessageID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MessageID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Opened", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Opened", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MessageID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MessageID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PMT.DAL.Properties.Settings.Default.PmtConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     MessageID, UserID, Opened,\r\n                          (SELECT     User" +
                "name\r\n                            FROM          Users\r\n                         " +
                "   WHERE      (MessageRecipients.UserID = ID)) AS Username\r\nFROM         Message" +
                "Recipients";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MessagingDataSet.MessageRecipientsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MessagingDataSet.MessageRecipientsDataTable GetMessageRecipients() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MessagingDataSet.MessageRecipientsDataTable dataTable = new MessagingDataSet.MessageRecipientsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MessagingDataSet.MessageRecipientsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MessagingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MessageRecipients");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MessageID, int Original_UserID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MessageID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_UserID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int MessageID, int UserID, bool Opened) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(MessageID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(UserID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(Opened));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int MessageID, int UserID, bool Opened, int Original_MessageID, int Original_UserID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(MessageID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(UserID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(Opened));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_MessageID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_UserID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    internal partial class ReceivedMessagesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReceivedMessagesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReceivedMessages";
            tableMapping.ColumnMappings.Add("MessageID", "MessageID");
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("Opened", "Opened");
            tableMapping.ColumnMappings.Add("SenderID", "SenderID");
            tableMapping.ColumnMappings.Add("Subject", "Subject");
            tableMapping.ColumnMappings.Add("Body", "Body");
            tableMapping.ColumnMappings.Add("DateSent", "DateSent");
            tableMapping.ColumnMappings.Add("Username", "Username");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PMT.DAL.Properties.Settings.Default.PmtConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     MessageRecipients.MessageID, MessageRecipients.UserID, MessageRecipients.Opened, Messages.SenderID, Messages.Subject, Messages.Body, 
                      Messages.DateSent, uRecipients.Username, pRecipients.FirstName, pRecipients.LastName
FROM         Messages LEFT OUTER JOIN
                      MessageRecipients ON Messages.ID = MessageRecipients.MessageID LEFT OUTER JOIN
                      Users AS uRecipients ON MessageRecipients.UserID = uRecipients.ID LEFT OUTER JOIN
                      UserProfile AS pRecipients ON MessageRecipients.UserID = pRecipients.ID LEFT OUTER JOIN
                      Users AS uSenders ON Messages.SenderID = uSenders.ID LEFT OUTER JOIN
                      UserProfile AS pSenders ON Messages.SenderID = pSenders.ID";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     MessageRecipients.MessageID, MessageRecipients.UserID, MessageRecipients.Opened, Messages.SenderID, Messages.Subject, Messages.Body, 
                      Messages.DateSent, uRecipients.Username, pRecipients.FirstName, pRecipients.LastName
FROM         Messages LEFT OUTER JOIN
                      MessageRecipients ON Messages.ID = MessageRecipients.MessageID LEFT OUTER JOIN
                      Users AS uRecipients ON MessageRecipients.UserID = uRecipients.ID LEFT OUTER JOIN
                      UserProfile AS pRecipients ON MessageRecipients.UserID = pRecipients.ID LEFT OUTER JOIN
                      Users AS uSenders ON Messages.SenderID = uSenders.ID LEFT OUTER JOIN
                      UserProfile AS pSenders ON Messages.SenderID = pSenders.ID
WHERE     (MessageRecipients.MessageID = @MessageID)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@MessageID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MessageID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     MessageRecipients.MessageID, MessageRecipients.UserID, MessageRecipients.Opened, Messages.SenderID, Messages.Subject, Messages.Body, 
                      Messages.DateSent, uRecipients.Username, pRecipients.FirstName, pRecipients.LastName
FROM         Messages LEFT OUTER JOIN
                      MessageRecipients ON Messages.ID = MessageRecipients.MessageID LEFT OUTER JOIN
                      Users AS uRecipients ON MessageRecipients.UserID = uRecipients.ID LEFT OUTER JOIN
                      UserProfile AS pRecipients ON MessageRecipients.UserID = pRecipients.ID LEFT OUTER JOIN
                      Users AS uSenders ON Messages.SenderID = uSenders.ID LEFT OUTER JOIN
                      UserProfile AS pSenders ON Messages.SenderID = pSenders.ID
WHERE     (MessageRecipients.UserID = @RecipientID)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RecipientID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT     MessageRecipients.MessageID, MessageRecipients.UserID, MessageRecipients.Opened, Messages.SenderID, Messages.Subject, Messages.Body, 
                      Messages.DateSent, uRecipients.Username, pRecipients.FirstName, pRecipients.LastName
FROM         Messages LEFT OUTER JOIN
                      MessageRecipients ON Messages.ID = MessageRecipients.MessageID LEFT OUTER JOIN
                      Users AS uRecipients ON MessageRecipients.UserID = uRecipients.ID LEFT OUTER JOIN
                      UserProfile AS pRecipients ON MessageRecipients.UserID = pRecipients.ID LEFT OUTER JOIN
                      Users AS uSenders ON Messages.SenderID = uSenders.ID LEFT OUTER JOIN
                      UserProfile AS pSenders ON Messages.SenderID = pSenders.ID
WHERE     (Messages.SenderID = @SenderID)";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SenderID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MessagingDataSet.ReceivedMessagesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MessagingDataSet.ReceivedMessagesDataTable GetMessages() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MessagingDataSet.ReceivedMessagesDataTable dataTable = new MessagingDataSet.ReceivedMessagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByMessageID(MessagingDataSet.ReceivedMessagesDataTable dataTable, int MessageID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(MessageID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MessagingDataSet.ReceivedMessagesDataTable GetMessagesByMessageID(int MessageID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(MessageID));
            MessagingDataSet.ReceivedMessagesDataTable dataTable = new MessagingDataSet.ReceivedMessagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByRecipientID(MessagingDataSet.ReceivedMessagesDataTable dataTable, int RecipientID) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(RecipientID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MessagingDataSet.ReceivedMessagesDataTable GetMessagesByRecipientID(int RecipientID) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(RecipientID));
            MessagingDataSet.ReceivedMessagesDataTable dataTable = new MessagingDataSet.ReceivedMessagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySenderID(MessagingDataSet.ReceivedMessagesDataTable dataTable, int SenderID) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(SenderID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MessagingDataSet.ReceivedMessagesDataTable GetMessagesBySenderID(int SenderID) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(SenderID));
            MessagingDataSet.ReceivedMessagesDataTable dataTable = new MessagingDataSet.ReceivedMessagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591